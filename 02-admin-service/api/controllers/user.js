'use strict';

const uuid = require ('uuid/v4');
const normalize = require ('normalize-email');
const database = require ('../helpers/database.js');
// const crypto = require ('../helpers/crypto.js');


// ----------------------------------------------------------------------------
// addNewUser
// id: string -> required and autogenerated by uuid
// name: string -> required
// email: string -> unique and required
// password: string -> required and encrypted
// img: string -> optional
// role: -> required and this default value should be exist in a list (enum)
// google: boolean -> optional
// status: string -> enabled : disabled
// createdat: Date -> required -> take the date when the user is registered
// ----------------------------------------------------------------------------
module.exports.addNewUser = async details => {
  try {
    const data = {
      userId: uuid(),
      email: normalize (details.email),
      // password: await crypto.hashPassword (details.password), Cifrado del password revision
      status: details.status? details.status : 'enabled',
    };

   
    const res = await database.insert ('User', data);

    return Promise.resolve (res.userId);
  }
  catch (ex) {
    return Promise.reject (ex);
  }
};

// ----------------------------------------------------------------------------
// getUserData
//
// filterBy: 'id'
// ----------------------------------------------------------------------------
module.exports.getUserData = async ( filterById ) => {
  try {

    const res = await database.find ('User', filter);

    if (res.length === 0)
      return Promise.resolve (null);


    return Promise.resolve (data);
  }
  catch (ex) {
    return Promise.reject (ex);
  }
};

// ----------------------------------------------------------------------------
// setUserData
// ----------------------------------------------------------------------------
module.exports.setUserData = async data => {
  try {
    
    return await database.update ();
  }
  catch (ex) {
    return Promise.reject (ex);
  }
};

// ----------------------------------------------------------------------------
// getAllUsers
// ----------------------------------------------------------------------------
module.exports.getAllUsers = async (offset, limit, filterBy) => {
  try {
    const res = await database.paginate ();
    return Promise.resolve ({ res });
  }
  catch (ex) {
    return Promise.reject (ex);
  }
};

// ----------------------------------------------------------------------------
// deleteUser
// ----------------------------------------------------------------------------
module.exports.deleteUser = async userId => {
  try {
    return Promise.resolve (await database.delete ('User', { userId: userId.trim() }));
  }
  catch (ex) {
    return Promise.reject (ex);
  }
};